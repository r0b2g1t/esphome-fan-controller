substitutions:
  friendly_name: Console Fan

esphome:
  name: console-fan

# Throttle writing parameters to the internal flash memory to reduce ESP memory wear / degradation
preferences:
  flash_write_interval: 15min

 
#########################
# ESP32 AND NETWORK SETUP

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# pid climate log update is noisy, dial it back to warn
logger:
  level: DEBUG
  logs: 
    climate: ERROR
    dht: WARN

# default HA integration, OTA updater and backup http web portal
api:
ota:
  - platform: esphome
wifi:

  # Read the wifi/pass from secrets.yaml:
  # wifi_ssid: "My Wifi XX"
  # wifi_password: "XXXXXXX"
  ssid: !secret wifi_ssid
  password: !secret wifi_password


switch:
  - platform: gpio
    name: "Switch"
    id: fan_relay
    pin: GPIO10
    internal: true

number:

  ## OPTIONAL:
  # RECEIVE KP, KI and KD parameters from input_text.kx helpers in 
  # Home Assistant. See the PID controller below
  # These helper values will get saved to flash thus permanently over-riding 
  # the initial values set in the PID below.

  # KP
  - platform: template
    name: kp
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.3
    min_value: 0
    max_value: 50
    step: 0.001
    optimistic: true
    set_action: 
      lambda: |- 
        id(console_thermostat).set_kp( x );

  # KI
  - platform: template
    name: ki
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.0015
    min_value: 0
    max_value: 50
    step: 0.0001
    optimistic: true
    set_action: 
      lambda: id(console_thermostat).set_ki( x );

  # KD
  - platform: template
    name: kd
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.0
    min_value: -50
    max_value: 50
    step: 0.001
    optimistic: true
    set_action: 
      lambda: id(console_thermostat).set_kd( x );

  # Set threshold low
  - platform: template
    name: Deadband Threshold Low
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: -1.0
    min_value: -20
    max_value: 0
    step: 0.1
    optimistic: true
    set_action: 
      lambda: id(console_thermostat).set_threshold_low( x );

  # Set threshold high
  - platform: template
    name: Deadband Threshold High
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.4
    min_value: 0
    max_value: 20
    step: 0.1
    optimistic: true
    set_action: 
      lambda: id(console_thermostat).set_threshold_high( x );

  # Set ki multiplier
  - platform: template
    name: Deadband ki Multiplier
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.04
    min_value: 0
    max_value: .2
    step: 0.01
    optimistic: true
    set_action: 
      lambda: id(console_thermostat).set_ki_multiplier( x );

sensor:
  - platform: dht
    pin: GPIO1
    model: DHT22
    temperature:
      name: "Temperature"
      id: "console_fan_temperature"
      
      accuracy_decimals: 3

      # If you don't smooth the temperature readings 
      # the PID controller over reacts to small changes.
      filters:
        - exponential_moving_average:  
            alpha: 0.1
            send_every: 1
    humidity:
      name: "Humidity"
      id: "console_fan_humidity"
    update_interval: 2s
  
  - platform: pulse_counter
    pin: 
      number: GPIO07   # Connect to any input PIN on the ESP
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed
    name: $friendly_name Fan Speed
    accuracy_decimals: 0
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 3s
  
  # Every time the fan speed is updated, this sensor will
  # also be updated for displaying on the frontend. 
  # See proxy_output.
  - platform: template
    name: "Fan Speed (PWM Voltage)"
    unit_of_measurement: "%"
    id: fan_speed_pwm_voltage

  ########################################################
# START THE FAN CONTROLLER SETUP

  - platform: template
    name: $friendly_name p term
    id: p_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name i term
    id: i_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name d term
    id: d_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name output value
    unit_of_measurement: "%"
    id: o_term
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name error value
    id: e_term
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name is in deadband
    id: in_deadband_term
    accuracy_decimals: 0

output:
  - platform: ledc
    id: console_fan_speed
    pin: GPIO5

    # 25KHz is standard PWM PC fan frequency, minimises buzzing
    frequency: "25000 Hz"

    # At 0, actually turn it off, otherwise the power keeps going.
    zero_means_zero: true

# This proxy output takes its input
  # if the manual fan control is on, use the level from that
  # otherwise use the PID control value.
  # Then publish the result to the fan (ledc) and 
  # also publish to the template output sensor
  - platform: template
    id: proxy_output
    type: float
    write_action:
      lambda: |-
        float write_val = 
          (id(manual_fan_control).state) ?
            id(manual_fan_control).speed / 100.0 : state*1.0;
        id(console_fan_speed).set_level(write_val);
        id(fan_speed_pwm_voltage).publish_state(write_val*100.0);


# If you turn this on, you can manually set the fan speed.
# The PID will be ignored. This is done via the proxy_output.
fan:
  - platform: speed
    id: manual_fan_control
    output: proxy_output
    name: "Manual Fan Speed"
    on_turn_on:
    - switch.turn_on: fan_relay
    on_turn_off:
    - switch.turn_off: fan_relay

# Expose a PID-controlled Thermostat
# Manual: https://esphome.io/components/climate/pid.html
climate:
  - platform: pid
    name: "Console Fan Thermostat"
    id: console_thermostat
    sensor: console_fan_temperature

    # It is summer right now, so 30c is a decent target.
    default_target_temperature: 30°C
    cool_output: proxy_output
    # cool_output: console_fan_speed

    # ON state change, publish the values to the x_term numbers defined 
    # above, so that they can be viewed in HA
    on_state:
      - sensor.template.publish:
          id: p_term
          state: !lambda 'return -id(console_thermostat).get_proportional_term() * 100.0;'
      - sensor.template.publish:
          id: i_term
          state: !lambda 'return -id(console_thermostat).get_integral_term()* 100.0;'
      - sensor.template.publish:
          id: d_term
          state: !lambda 'return -id(console_thermostat).get_derivative_term()* 100.0;'
      - sensor.template.publish:
          id: o_term
          state: !lambda 'return -id(console_thermostat).get_output_value()* 100.0;'
      - sensor.template.publish:
          id: in_deadband_term
          state: !lambda 'return id(console_thermostat).in_deadband();'
      - sensor.template.publish:
          id: e_term
          state: !lambda 'return -id(console_thermostat).get_error_value();'
      - lambda: |-
          if(id(console_thermostat).action==CLIMATE_ACTION_OFF || id(console_thermostat).action==CLIMATE_ACTION_IDLE && id(manual_fan_control).state!=true)
            id(fan_relay).turn_off();
      - lambda: |-
          if(id(console_thermostat).action==CLIMATE_ACTION_COOLING)
            id(fan_relay).turn_on();

      

        
    # The extents of the HA Thermostat
    visual:
      min_temperature: 15 °C
      max_temperature: 45 °C
  
    # See the README for setting up these parameters.
    # These are over ridden by the number templates above.
    control_parameters:
      kp: 0.9226
      ki: 0.0034
      kd: 50.000
      max_integral: 0.0
      output_averaging_samples: 1
      derivative_averaging_samples: 5

    # How to behave when close to the target temperature?
    deadband_parameters:
      threshold_high: 0.4°C
      threshold_low: -1.0°C
      kp_multiplier: 0.0
      ki_multiplier: 0.04
      kd_multiplier: 0.0
      deadband_output_averaging_samples: 15

# I was able to find good KP,KI,KD values manually, per the instructions,
# but you can try pressing the autotune button from home assistant and copying the 
# values it produces. 
# See more at: https://esphome.io/components/climate/pid.html#climate-pid-autotune-action
button:
- platform: template
  name: "PID Climate Autotune"
  on_press: 
    - climate.pid.autotune: console_thermostat
    
